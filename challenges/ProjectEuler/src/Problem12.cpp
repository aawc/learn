/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include "../include/Problem12.h"
#include <iostream>
#include <cmath>
using namespace std;

Problem12::Problem12(unsigned int numDivisorsLimit)
{
	this->numDivisorsLimit = numDivisorsLimit;
}

Problem12::~Problem12()
{
}

Problem12::Problem12(const Problem12& other)
{
	this->numDivisorsLimit = other.numDivisorsLimit;
}

Problem12& Problem12::operator=(const Problem12& other)
{
	if (this == &other) return *this; // handle self assignment
	this->numDivisorsLimit = other.numDivisorsLimit;
	return *this;
}

long long Problem12::getTriangleNumberWithDivisors()
{
	int i = 1; unsigned int maxCount = 0;
	while (true)
	{
		long long n = i*(i+1)/2;
		//cout << "i: " << i << "; n: " << n << endl;
		unsigned int count = this->numberOfDivisors(n);
		if (count > maxCount)
		{
			cout << "n: " << n << "; count: " << count << endl;
			maxCount = count;
		}
		if (count >= this->numDivisorsLimit)
		{
			return n;
		}
		i++;
	}
	return -1;
}

unsigned int Problem12::numberOfDivisors(long long n)
{
	long long i; unsigned int count = 0;
	long long squareRoot = sqrt(n);
	//cout << "; n: " << n << "; factors: 1, ";
	for (i = 1; i <= squareRoot; i++)
	{
		if (n%i == 0)
		{
			//cout << i << ", ";
			count++;
		}
	}
	count *= 2;
	if (squareRoot * squareRoot == n)
	{
		count --;
	}
	//cout << "n: " << n << "; count: " << count << endl;

	return count;
}
