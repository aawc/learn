/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

#include "../include/Problem2.h"
#include "cmath"
using namespace std;

Problem2::Problem2(long long upperLimit)
{
    this->upperLimit = upperLimit;
	this->terms = new long long [2];
	this->terms[0] = 1;
	this->terms[1] = 2;
	this->sum = 2;
}

Problem2::~Problem2()
{
	delete []terms;
}

Problem2::Problem2(const Problem2& other)
{
    this->upperLimit = other.upperLimit;
}

Problem2& Problem2::operator=(const Problem2& rhs)
{
    if (this == &rhs) return *this; // handle self assignment
    this->upperLimit = rhs.upperLimit;
    return *this;
}

void Problem2::updateSumAndTerms(long long next)
{
	if (next%2 == 0)
	{
		this->sum += next;
	}
	this->terms[0] = this->terms[1];
	this->terms[1] = next;
}

long long Problem2::getSumUptoLimit()
{
	long long next = terms[0] + terms[1];
	if (next < this->upperLimit)
	{
		this->updateSumAndTerms(next);
		this->getSumUptoLimit();
	}
	return this->sum;
}
